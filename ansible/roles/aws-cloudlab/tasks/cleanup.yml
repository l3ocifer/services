---
# Discover and cleanup AWS resources in reverse dependency order

- name: Check for existing load balancers
  community.aws.elb_application_lb_info:
    region: "{{ aws_region }}"
    names: ["{{ load_balancer_config.name }}"]
  register: existing_load_balancers
  when: deployment_type | default('test') == 'prod'

- name: Delete load balancer
  community.aws.elb_application_lb:
    name: "{{ load_balancer_config.name }}"
    state: absent
    region: "{{ aws_region }}"
  when: >
    deployment_type | default('test') == 'prod' and
    existing_load_balancers.load_balancers | length > 0
  register: lb_delete
  until: lb_delete is not failed
  retries: 3
  delay: 10

- name: Check for existing target groups
  community.aws.elb_target_group_info:
    region: "{{ aws_region }}"
    names: ["{{ load_balancer_config.name }}-tg"]
  register: existing_target_groups
  when: deployment_type | default('test') == 'prod'

- name: Delete target group
  community.aws.elb_target_group:
    name: "{{ load_balancer_config.name }}-tg"
    state: absent
    region: "{{ aws_region }}"
  when: >
    deployment_type | default('test') == 'prod' and
    existing_target_groups.target_groups | length > 0
  register: tg_delete
  until: tg_delete is not failed
  retries: 3
  delay: 10

- name: Check for existing instances
  amazon.aws.ec2_instance_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ environment_prefix }}*"
      instance-state-name: ["pending", "running", "stopping", "stopped"]
  register: existing_instances

- name: Terminate instances
  amazon.aws.ec2_instance:
    instance_ids: "{{ existing_instances.instances | map(attribute='instance_id') | list }}"
    state: absent
    region: "{{ aws_region }}"
  when: existing_instances.instances | length > 0
  register: terminated_instances
  until: terminated_instances is not failed
  retries: 3
  delay: 10

- name: Get all VPCs with environment prefix
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ environment_prefix }}*"
  register: tagged_vpcs

- name: Check for existing VPC endpoints
  amazon.aws.ec2_vpc_endpoint_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ item.vpc_id }}"
  loop: "{{ tagged_vpcs.vpcs }}"
  register: existing_vpc_endpoints
  when: tagged_vpcs.vpcs | length > 0

- name: Delete VPC endpoints
  amazon.aws.ec2_vpc_endpoint:
    vpc_endpoint_id: "{{ item.vpc_endpoint_id }}"
    state: absent
    region: "{{ aws_region }}"
  loop: "{{ existing_vpc_endpoints.results | selectattr('vpc_endpoints', 'defined') | map(attribute='vpc_endpoints') | flatten | list }}"
  when: existing_vpc_endpoints.results is defined and existing_vpc_endpoints.results | length > 0
  register: vpc_endpoint_deletion
  retries: 3
  delay: 10
  until: vpc_endpoint_deletion is not failed

- name: Check for existing NAT gateways
  amazon.aws.ec2_vpc_nat_gateway_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ item.vpc_id }}"
  loop: "{{ tagged_vpcs.vpcs }}"
  register: existing_nat_gateways

- name: Delete NAT gateways
  amazon.aws.ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ item.nat_gateway_id }}"
    state: absent
    region: "{{ aws_region }}"
    release_eip: yes
    wait: yes
    wait_timeout: 300
  loop: "{{ existing_nat_gateways.results | map(attribute='nat_gateways', default=[]) | flatten | list }}"
  when: existing_nat_gateways.results | map(attribute='nat_gateways', default=[]) | flatten | list | length > 0
  register: nat_gateway_delete
  retries: 3
  delay: 30
  until: nat_gateway_delete is not failed

- name: Wait for NAT gateways to be fully deleted
  amazon.aws.ec2_vpc_nat_gateway_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ item.vpc_id }}"
  loop: "{{ tagged_vpcs.vpcs }}"
  register: nat_gateway_status
  until: nat_gateway_status.results | map(attribute='nat_gateways', default=[]) | flatten | list | length == 0
  retries: 20
  delay: 30
  when: nat_gateway_delete.changed | default(false)

- name: Check for existing elastic IPs
  amazon.aws.ec2_eip_info:
    region: "{{ aws_region }}"
    filters:
      domain: vpc
  register: existing_eips

- name: Release elastic IPs
  amazon.aws.ec2_eip:
    public_ip: "{{ item.public_ip }}"
    state: absent
    region: "{{ aws_region }}"
    release_on_disassociation: true
  loop: "{{ existing_eips.addresses | default([]) }}"
  when: existing_eips.addresses | default([]) | length > 0
  register: eip_release
  until: eip_release is not failed
  retries: 3
  delay: 10

- name: Check for existing internet gateways
  amazon.aws.ec2_vpc_igw_info:
    region: "{{ aws_region }}"
    filters:
      attachment.vpc-id: "{{ item.vpc_id }}"
  loop: "{{ tagged_vpcs.vpcs }}"
  register: existing_igws
  when: tagged_vpcs.vpcs | length > 0

- name: Delete internet gateways
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ item.attachments[0].vpc_id }}"
    state: absent
    region: "{{ aws_region }}"
  loop: "{{ existing_igws.results | map(attribute='internet_gateways') | flatten | list }}"
  when: existing_igws.results is defined and existing_igws.results | length > 0
  register: igw_delete
  until: igw_delete is not failed
  retries: 3
  delay: 10
  ignore_errors: yes

- name: Delete VPCs
  amazon.aws.ec2_vpc_net:
    vpc_id: "{{ item.vpc_id }}"
    state: absent
    region: "{{ aws_region }}"
  loop: "{{ tagged_vpcs.vpcs }}"
  when: tagged_vpcs.vpcs | length > 0
  register: vpc_delete
  until: vpc_delete is not failed
  retries: 3
  delay: 10
